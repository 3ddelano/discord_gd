# Represents a Discord message
class_name Message extends Dataclass

var id: String # Id of the message
var channel_id: String # Id of the channel the message was sent in
var author: User # The author of this message (not guaranteed to be a valid user)
var content: String # Contents of the message
var timestamp: String # When this message was sent
var edited_timestamp = null # [String] When this message was edited (or null if never)
var tts: bool # Whether this was a TTS message
var mention_everyone: bool # Whether this message mentions everyone
var mentions: Array # [Array] of [User] Users specifically mentioned in the message
var mention_roles: Array # [Array] of [String] Roles Ids of roles specifically mentioned in this message
var mention_channels = null # [Array] of [ChannelMention] Channels specifically mentioned in this message
var attachments: Array # [Array] of [Attachment] Any attached files
var embeds: Array # [Array] of [Embed] Any embedded content
var reactions = null # [Array] of [Reaction] Reactions to the message
var nonce = null # [int] | [String] Used for validating a message was sent
var pinned: bool # Whether this message is pinned
var webhook_id = null # [String] If the message is generated by a webhook, this is the webhook's id
var type: int # [MessageTypes] type of message
var activity = null # [MessageActivity] Sent with Rich Presence-related chat embeds
var application = null # Partial [Application] Sent with Rich Presence-related chat embeds
var application_id = null # [String] If the message is an [Interaction] or application-owned webhook, this is the id of the application
var message_reference = null # [MessageReference] Data showing the source of a crosspost, channel follow add, pin, or reply message
var flags = null # [MessageFlags] Message flags combined as a bitfield
var referenced_message = null # [Message] The message associated with the message_reference
var interaction = null # [MessageInteraction] Sent if the message is a response to an [Interaction]
var thread = null # [Channel] The thread that was started from this message, includes [ThreadMember]
var components = null # [Array] of [MessageActionRow] Sent if the message contains components like buttons, action rows, or other interactive components
var sticker_items = null # [Array] of [MessageStickerItem] Sent if the message contains stickers
var stickers = null # [Array] of Sticker (deprecated) The stickers sent with the message


# @hidden
func _init().("Message"): return self


# @hidden
func from_dict(p_dict: Dictionary):
	.from_dict(p_dict)

	author = User.new().from_dict(p_dict.author)
	if p_dict.has("mentions"):
		mentions = []
		for data in p_dict.mentions:
			mentions.append(User.new().from_dict(data))
	if p_dict.has("mention_channels"):
		mention_channels = []
		for data in p_dict.mention_channels:
			mention_channels.append(ChannelMention.new().from_dict(data))
	if p_dict.has("attachments"):
		attachments = []
		for data in p_dict.attachments:
			attachments.append(Attachment.new().from_dict(data))
	if p_dict.has("embeds"):
		embeds = []
		for data in p_dict.embeds:
			embeds.append(Embed.new().from_dict(data))
	if p_dict.has("reactions"):
		reactions = []
		for data in p_dict.reactions:
			reactions.append(Reaction.new().from_dict(data))
	if p_dict.has("activity"):
		activity = MessageActivity.new().from_dict(p_dict.activity)
	if p_dict.has("application"):
		application = Application.new().from_dict(p_dict.application)
	if p_dict.has("message_reference"):
		message_reference = MessageReference.new().from_dict(p_dict.message_reference)
	if p_dict.has("flags"):
		flags = MessageFlags.new(p_dict.flags)
	if p_dict.has("referenced_message") and p_dict.referenced_message != null:
		referenced_message = get_script().new().from_dict(p_dict.referenced_message) # TODO: check if get_script() works
	if p_dict.has("interaction"):
		interaction = MessageInteraction.new().from_dict(p_dict.interaction)
	if p_dict.has("thread"):
		thread = Channel.new().from_dict(p_dict.thread)
	if p_dict.has("components"):
		components = []
		for data in p_dict.components:
			components.append(MessageActionRow.new().from_dict(data))
	if p_dict.has("sticker_items"):
		sticker_items = []
		for data in p_dict.sticker_items:
			sticker_items.append(StickerItem.new().from_dict(data))
	if p_dict.has("stickers"):
		stickers = []
		for data in p_dict.stickers:
			stickers.append(Sticker.new().from_dict(data))
	return self


# @hidden
func to_dict() -> Dictionary:
	var dict = .to_dict().duplicate(true)

	dict.author = dict.author.to_dict()
	if dict.has("mentions"):
		for i in dict.mentions.size():
			dict.mentions[i] = dict.mentions[i].to_dict()
	if dict.has("mention_channels"):
		for i in dict.mention_channels.size():
			dict.mention_channels[i] = dict.mention_channels[i].to_dict()
	if dict.has("attachments"):
		for i in dict.attachments.size():
			dict.attachments[i] = dict.attachments[i].to_dict()
	if dict.has("embeds"):
		for i in dict.embeds.size():
			dict.embeds[i] = dict.embeds[i].to_dict()
	if dict.has("reactions") and dict.reactions != null:
		for i in dict.reactions.size():
			dict.reactions[i] = dict.reactions[i].to_dict()
	if dict.has("activity") and dict.activity != null:
		dict.activity = dict.activity.to_dict()
	if dict.has("application") and dict.application != null:
		dict.application = dict.application.to_dict()
	if dict.has("message_reference") and dict.message_reference != null:
		dict.message_reference = dict.message_reference.to_dict()
	if dict.has("flags") and dict.flags != null:
		dict.flags = dict.flags.bitfield
	if dict.has("referenced_message") and dict.referenced_message != null:
		dict.referenced_message = dict.referenced_message.to_dict()
	if dict.has("interaction") and dict.interaction != null:
		dict.interaction = dict.interaction.to_dict()
	if dict.has("thread") and dict.thread != null:
		dict.thread = dict.thread.to_dict()
	if dict.has("components") and components != null:
		for i in dict.components.size():
			dict.components[i] = dict.components[i].to_dict()
	if dict.has("sticker_items") and sticker_items != null:
		for i in dict.sticker_items.size():
			dict.sticker_items[i] = dict.sticker_items[i].to_dict()
	if dict.has("stickers") and stickers != null:
		for i in dict.stickers.size():
			dict.stickers[i] = dict.stickers[i].to_dict()
	return dict
